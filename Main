local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Load the Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Arise Crossover Macro Test",
    Icon = 0, -- No icon in the top bar
    LoadingTitle = "Arise Crossover Macro Test",
    LoadingSubtitle = "by Nisulrocks",
    Theme = "Default", -- You can customize the theme as needed
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AriseCrossover", -- Custom folder name
        FileName = "AriseCrossoverConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false
})

-- Main tab
local MainTab = Window:CreateTab("Main", 4483362458)
MainTab:CreateLabel("Arise Crossover Macro Test")

-- Teleport tab
local TeleportTab = Window:CreateTab("Teleport", 4483362458)

-- Get all the islands (worlds) from the "__World" folder
local worldFolder = game.Workspace.__Main.__World
local worldNames = {}

-- Populate the world names into the table and log them
for _, world in pairs(worldFolder:GetChildren()) do
    if world:IsA("Model") then
        table.insert(worldNames, world.Name)
        print("Found world: " .. world.Name)  -- Log the world names to check for any discrepancies
    end
end

-- Create a dropdown for selecting an island
local IslandDropdown = TeleportTab:CreateDropdown({
    Name = "Choose Island",
    Options = worldNames,
    CurrentOption = (#worldNames > 0) and worldNames[1] or "", -- Safely handle empty worldNames
    Flag = "IslandDropdown",
    Callback = function(selectedIsland)
        -- Check if selectedIsland is valid before saving it
        if selectedIsland and type(selectedIsland) == "string" then
            _G.selectedIsland = selectedIsland
            print("Selected island: " .. selectedIsland)
        else
            if type(selectedIsland) == "table" then
                print("Warning: Selected island is a table, not a string")
                -- If it's a table with a single value, try to use that
                if #selectedIsland == 1 and type(selectedIsland[1]) == "string" then
                    _G.selectedIsland = selectedIsland[1]
                    print("Used first value in table: " .. _G.selectedIsland)
                end
            else
                print("Warning: Invalid island selection")
            end
        end
    end
})

-- Create a teleport button with a simplified approach
local TeleportButton = TeleportTab:CreateButton({
    Name = "Teleport",
    Callback = function()
        -- Check if an island has been selected
        if _G.selectedIsland and type(_G.selectedIsland) == "string" then
            -- Debug print to check the selected island name
            print("Attempting to teleport to: " .. _G.selectedIsland)
            
            -- Find the selected world
            local selectedWorld = worldFolder:FindFirstChild(_G.selectedIsland)
            
            if selectedWorld and selectedWorld:IsA("Model") then
                print("Found world model: " .. selectedWorld.Name)
                
                -- Make sure the player character is loaded
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    -- Get position to teleport to
                    local teleportPosition
                    
                    -- Try to get the world's position using different methods
                    if selectedWorld:IsA("BasePart") then
                        -- If the world itself is a BasePart, use its position
                        teleportPosition = selectedWorld.Position + Vector3.new(0, 5, 0)
                    elseif selectedWorld.PrimaryPart then
                        -- If the world has a PrimaryPart, use its position
                        teleportPosition = selectedWorld.PrimaryPart.Position + Vector3.new(0, 5, 0)
                    else
                        -- If no direct position, calculate the center of the model
                        local minPos, maxPos
                        
                        -- Find any parts in the model to calculate bounds
                        for _, part in pairs(selectedWorld:GetDescendants()) do
                            if part:IsA("BasePart") then
                                if not minPos then
                                    minPos = part.Position
                                    maxPos = part.Position
                                else
                                    -- Update min/max for each axis
                                    minPos = Vector3.new(
                                        math.min(minPos.X, part.Position.X),
                                        math.min(minPos.Y, part.Position.Y),
                                        math.min(minPos.Z, part.Position.Z)
                                    )
                                    maxPos = Vector3.new(
                                        math.max(maxPos.X, part.Position.X),
                                        math.max(maxPos.Y, part.Position.Y),
                                        math.max(maxPos.Z, part.Position.Z)
                                    )
                                end
                            end
                        end
                        
                        if minPos and maxPos then
                            -- Calculate center position and add slight Y offset
                            teleportPosition = minPos:Lerp(maxPos, 0.5) + Vector3.new(0, 10, 0)
                        else
                            -- Fallback: Find first BasePart and use its position
                            local anyPart = selectedWorld:FindFirstDescendantWhichIsA("BasePart")
                            if anyPart then
                                teleportPosition = anyPart.Position + Vector3.new(0, 5, 0)
                            else
                                warn("Could not find any parts in the world to teleport to!")
                                return
                            end
                        end
                    end
                    
                    -- Teleport the player
                    if teleportPosition then
                        -- Create a CFrame at the teleport position
                        local teleportCFrame = CFrame.new(teleportPosition)
                        player.Character.HumanoidRootPart.CFrame = teleportCFrame
                        print("Teleported to world model!")
                    else
                        warn("Failed to determine teleport position!")
                    end
                else
                    warn("Player character not fully loaded!")
                end
            else
                warn("Selected island '" .. _G.selectedIsland .. "' not found in world folder!")
                -- Print all available worlds for debugging
                print("Available worlds:")
                for _, world in pairs(worldFolder:GetChildren()) do
                    if world:IsA("Model") then
                        print("- " .. world.Name)
                    end
                end
            end
        else
            warn("Please select an island to teleport!")
        end
    end
})

-- Add a refresh button to refresh the world list
local RefreshButton = TeleportTab:CreateButton({
    Name = "Refresh Island List",
    Callback = function()
        worldNames = {}
        -- Re-populate the world names into the table
        for _, world in pairs(worldFolder:GetChildren()) do
            if world:IsA("Model") then
                table.insert(worldNames, world.Name)
                print("Refreshed world list - Found: " .. world.Name)
            end
        end
        
        -- Safely update the dropdown with new options
        if #worldNames > 0 then
            IslandDropdown:Refresh(worldNames, worldNames[1])
            print("Island list refreshed!")
        else
            IslandDropdown:Refresh({}, "")
            print("Island list refreshed, but no islands were found!")
        end
    end
})

-- Make sure the Rayfield UI is visible
local rayfieldGui = game.CoreGui:FindFirstChild("Rayfield") or player:WaitForChild("PlayerGui"):FindFirstChild("Rayfield")
if rayfieldGui then
    rayfieldGui.Enabled = true
end

print("Script loaded successfully!")
